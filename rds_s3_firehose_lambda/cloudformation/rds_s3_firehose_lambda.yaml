---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
    Create a VPC with a two PublicSubnets and public PostgreSQL RDS
    Create Kinesis Firehose delivery streams with associated S3 bucket
    Create Lambdas for transferring data from Kinesis Firehose delivery streams S3
    bucket to RDS
Parameters:
    # RDS
    DbInstanceClass:
        Description: Database instance class
        Type: String
        Default: db.t2.micro
    DbMaxAllocatedStorage:
        Description: Database maximal allocated storage
        Type: String
        Default: 5
    DbEngine:
        Description: Database engine
        Type: String
        Default: postgres
    DbEngineVersion:
        Description: Database engine version
        Type: String
        Default: 11.2
    DbPort:
        Description: Database port
        Type: String
    DbName:
        Description: Database name
        Type: String
    DbUser:
        Description: Database master user
        Type: String
    DbPassword:
        Description: Database master user password
        Type: String
    # S3
    FirehoseDeliveryStreamS3BucketName:
        Description: Kinesis Firehose delivery stream S3 bucket name
        Type: String
    LambdaPackageS3BucketName:
        Description: Lambda package S3 bucket name
        Type: String
    # Kinesis Firehose
    FirehoseBufferSizeMb:
        Description: Kinesis Firehose buffer size in MB
        Type: String
        Default: 1
    FirehoseBufferIntervalSec:
        Description: Kinesis Firehose buffer interval in sec
        Type: String
        Default: 60
    # Lambda
    LambdaLogLevel:
        Description: Lambda log level
        Type: String
        Default: DEBUG
    LambdaPythonRuntime:
        Description: Lambda Python runtime
        Type: String
        Default: python3.7
    LambdaTimeoutSec:
        Description: Lambda timeout
        Type: String
        Default: 300
    PutProductInDbLambdaVersion:
        Description: PutProductInDb lambda version
        Type: String
    PutInfringementInDbLambdaVersion:
        Description: PutInfringementInDb lambda version
        Type: String
Resources:
    # VPC
    Vpc:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.1.0.0/16
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-Vpc
    # Public Subnet
    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            CidrBlock: 10.1.10.0/24
            AvailabilityZone: !Select [0, !GetAZs ]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-PublicSubnet
    # Public Subnet 2
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            CidrBlock: 10.1.20.0/24
            AvailabilityZone: !Select [1, !GetAZs ]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-PublicSubnet2
    # InternetGateway
    InternetGateway:
        Type: AWS::EC2::InternetGateway
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref Vpc
            InternetGatewayId: !Ref InternetGateway
    # Public RouteTable
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: PublicRouteTable
    PublicRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet
    # Public RouteTable 2
    PublicRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: PublicRouteTable2
    PublicRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    PublicSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable2
            SubnetId: !Ref PublicSubnet2
    # Public SecurityGroup
    PublicSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: PublicSecurityGroup
            GroupDescription: Public Security Group
            VpcId: !Ref Vpc
    PublicOutboundRule1:
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
            GroupId: !Ref PublicSecurityGroup
            IpProtocol: "-1"
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
    PublicInboundRule1:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref PublicSecurityGroup
            IpProtocol: tcp
            FromPort: !Ref DbPort
            ToPort: !Ref DbPort
            CidrIp: 0.0.0.0/0
    # Public PostgreSQL RDS
    PublicDbSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: "Public DB subnet group"
            DBSubnetGroupName: !Sub ${AWS::StackName}-PublicDbSubnetGroup
            SubnetIds:
                - !Ref PublicSubnet
                - !Ref PublicSubnet2
    PublicDbInstance:
        Type: AWS::RDS::DBInstance
        DeletionPolicy: Delete
        Properties:
            DBInstanceClass: !Ref DbInstanceClass
            AllocatedStorage: !Ref DbMaxAllocatedStorage
            Port: !Ref DbPort
            Engine: !Ref DbEngine
            EngineVersion: !Ref DbEngineVersion
            MasterUsername: !Ref DbUser
            MasterUserPassword: !Ref DbPassword
            DBName: !Ref DbName
            PubliclyAccessible: true
            DBSubnetGroupName: !Ref PublicDbSubnetGroup
            VPCSecurityGroups:
                - !Ref PublicSecurityGroup
    # Kinesis Firehose delivery stream S3 bucket
    FirehoseDeliveryStreamS3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Delete
        Properties:
            BucketName: !Ref FirehoseDeliveryStreamS3BucketName
            # NotificationConfiguration causes circular dependency error
            # NotificationConfiguration:
            #     LambdaConfigurations:
            #         # Product lambda
            #         - Event: s3:ObjectCreated:*
            #           Filter:
            #               S3Key:
            #                   Rules:
            #                       - Name: prefix
            #                         Value: product/
            #           Function: !GetAtt PutProductInDbLambda.Arn
    # Kinesis Firehose IAM Role
    FirehoseDeliveryStreamIamPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            ManagedPolicyName: FirehoseDeliveryStreamIamPolicy
            Description: Grants access to Kinesis Firehose delivery stream to upload data to S3
            Path: /
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    # S3
                    - Effect: Allow
                      Action:
                          - s3:GetBucketLocation
                          - s3:ListBucket
                          - s3:PutObject
                          - s3:GetObject
                          - s3:ListBucketMultipartUploads
                          - s3:AbortMultipartUpload
                      Resource:
                          - !Sub arn:aws:s3:::${FirehoseDeliveryStreamS3Bucket}/*
                    # CloudWatch
                    - Effect: Allow
                      Action:
                          - logs:*
                      Resource:
                          - arn:aws:logs:*:*:*
    FirehoseDeliveryStreamIamRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: FirehoseDeliveryStreamIamRole
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - firehose.amazonaws.com
            ManagedPolicyArns:
                - !Ref FirehoseDeliveryStreamIamPolicy
    # Kinesis Firehose delivery streams
    ProductDeliveryStream:
        Type: AWS::KinesisFirehose::DeliveryStream
        Properties:
            DeliveryStreamName: ProductDeliveryStream
            DeliveryStreamType: DirectPut
            S3DestinationConfiguration:
                BucketARN: !GetAtt FirehoseDeliveryStreamS3Bucket.Arn
                BufferingHints:
                    SizeInMBs: !Ref FirehoseBufferSizeMb
                    IntervalInSeconds: !Ref FirehoseBufferIntervalSec
                CompressionFormat: UNCOMPRESSED
                Prefix: product/
                ErrorOutputPrefix: product-error/
                RoleARN: !GetAtt FirehoseDeliveryStreamIamRole.Arn
                CloudWatchLoggingOptions:
                    Enabled: true
                    LogGroupName: FirehoseDeliveryGroup
                    LogStreamName: ProductDeliveryStream
    InfringementDeliveryStream:
        Type: AWS::KinesisFirehose::DeliveryStream
        Properties:
            DeliveryStreamName: InfringementDeliveryStream
            DeliveryStreamType: DirectPut
            S3DestinationConfiguration:
                BucketARN: !GetAtt FirehoseDeliveryStreamS3Bucket.Arn
                BufferingHints:
                    SizeInMBs: !Ref FirehoseBufferSizeMb
                    IntervalInSeconds: !Ref FirehoseBufferIntervalSec
                CompressionFormat: UNCOMPRESSED
                Prefix: infringement/
                ErrorOutputPrefix: infringement-error/
                RoleARN: !GetAtt FirehoseDeliveryStreamIamRole.Arn
                CloudWatchLoggingOptions:
                    Enabled: true
                    LogGroupName: FirehoseDeliveryGroup
                    LogStreamName: InfringementDeliveryStream
    # Lambda IAM Role
    PutDataInDbLambdaIamPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            ManagedPolicyName: PutDataInDbLambdaIamPolicy
            Description: Grants access to Lambda to get data from S3 and put data into RDS
            Path: /
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    # S3
                    - Effect: Allow
                      Action:
                          - s3:GetBucketLocation
                          - s3:ListBucket
                          - s3:GetObject
                          - s3:ListBucketMultipartUploads
                      Resource:
                          - !Sub arn:aws:s3:::${FirehoseDeliveryStreamS3BucketName}/*
                    # RDS
                    - Effect: Allow
                      Action:
                          - rds:*
                      Resource:
                          - !Sub arn:aws:rds:*:*:*
                    # CloudWatch
                    - Effect: Allow
                      Action:
                          - logs:*
                      Resource:
                          - !Sub arn:aws:logs:*:*:*
    PutDataInDbLambdaIamRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: PutDataInDbLambdaIamRole
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - lambda.amazonaws.com
            ManagedPolicyArns:
                - !Ref PutDataInDbLambdaIamPolicy
    # Product lambda
    PutProductInDbLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: PutProductInDbLambda
            Description: Put products into database
            Runtime: !Ref LambdaPythonRuntime
            Timeout: !Ref LambdaTimeoutSec
            Environment:
                Variables:
                    STACK_NAME: !Sub ${AWS::StackName}
                    LAMBDA_VERSION: !Ref PutProductInDbLambdaVersion
                    LOG_LEVEL: !Ref LambdaLogLevel
                    DB_HOST: !GetAtt PublicDbInstance.Endpoint.Address
                    DB_PORT: !GetAtt PublicDbInstance.Endpoint.Port
                    DB_NAME: !Ref DbName
                    DB_USER: !Ref DbUser
                    DB_PASSWORD: !Ref DbPassword
            Code:
                S3Bucket: !Ref LambdaPackageS3BucketName
                S3Key: !Sub PutProductInDbLambda-${PutProductInDbLambdaVersion}.zip
            Handler: lambda_function.lambda_handler
            Role: !GetAtt PutDataInDbLambdaIamRole.Arn
    InvokePutProductInDbLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt PutProductInDbLambda.Arn
            Principal: s3.amazonaws.com
            SourceArn: !Sub arn:aws:s3:::${FirehoseDeliveryStreamS3BucketName}
    # Infringement lambda
    PutInfringementInDbLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: PutInfringementInDbLambda
            Description: Put infringements into database
            Runtime: !Ref LambdaPythonRuntime
            Timeout: !Ref LambdaTimeoutSec
            Environment:
                Variables:
                    STACK_NAME: !Sub ${AWS::StackName}
                    LAMBDA_VERSION: !Ref PutInfringementInDbLambdaVersion
                    LOG_LEVEL: !Ref LambdaLogLevel
                    DB_HOST: !GetAtt PublicDbInstance.Endpoint.Address
                    DB_PORT: !GetAtt PublicDbInstance.Endpoint.Port
                    DB_NAME: !Ref DbName
                    DB_USER: !Ref DbUser
                    DB_PASSWORD: !Ref DbPassword
            Code:
                S3Bucket: !Ref LambdaPackageS3BucketName
                S3Key: !Sub PutInfringementInDbLambda-${PutInfringementInDbLambdaVersion}.zip
            Handler: lambda_function.lambda_handler
            Role: !GetAtt PutDataInDbLambdaIamRole.Arn
    InvokePutInfringementInDbLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt PutInfringementInDbLambda.Arn
            Principal: s3.amazonaws.com
            SourceArn: !Sub arn:aws:s3:::${FirehoseDeliveryStreamS3BucketName}
Outputs:
    # VPC
    VpcId:
        Description: VPC ID
        Value: !Ref Vpc
    VpcCidrBlock:
        Description: VPC CIDR block
        Value: !GetAtt Vpc.CidrBlock
    # Public Subnet
    PublicSubnetId:
        Description: Public Subnet ID
        Value: !Ref PublicSubnet
    PublicSubnetAvailabilityZone:
        Description: Public Subnet AvailabilityZone
        Value: !GetAtt PublicSubnet.AvailabilityZone
    # Public Subnet2
    PublicSubnet2Id:
        Description: Public Subnet 2 ID
        Value: !Ref PublicSubnet2
    PublicSubnet2AvailabilityZone:
        Description: Public Subnet 2 AvailabilityZone
        Value: !GetAtt PublicSubnet2.AvailabilityZone
    # Public PostgreSQL RDS
    PublicDbInstanceName:
        Description: Public DB instance name
        Value: !Ref PublicDbInstance
    PublicDbInstanceEndpointAddress:
        Description: Public DB instance name endpoint address
        Value: !GetAtt PublicDbInstance.Endpoint.Address
    PublicDbInstanceEndpointPort:
        Description: Public DB instance name endpoint port
        Value: !GetAtt PublicDbInstance.Endpoint.Port
    # Kinesis Firehose delivery stream S3 bucket
    FirehoseDeliveryStreamS3BucketName:
        Description: Kinesis Firehose delivery stream S3 bucket name
        Value: !Ref FirehoseDeliveryStreamS3Bucket
    # Kinesis Firehose delivery streams
    ProductDeliveryStreamName:
        Description: Product delivery stream name
        Value: !Ref ProductDeliveryStream
    InfringementDeliveryStreamName:
        Description: Infringement delivery stream name
        Value: !Ref InfringementDeliveryStream
    # Lambda
    PutProductInDbLambdaName:
        Description: PutProductInDb lambda name
        Value: !Ref PutProductInDbLambda
    PutInfringementInDbLambdaName:
        Description: PutInfringementInDb lambda name
        Value: !Ref PutInfringementInDbLambda
