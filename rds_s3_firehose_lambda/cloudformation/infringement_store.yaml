---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
    Create a VPC with two private subnets in different AvailabilityZoness and a
    PostgreSQL RDS. Create a bastion host in a public subnet to access private RDS
    instance through SSH tunelling
Parameters:
    # VPC
    VpcCidrBlock:
        Description: VPC CIDR block
        Type: String
        AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
        Default: 10.1.0.0/16
    # Public and private Subnets
    PublicSubnetCidrBlock:
        Description: Public subnet CIDR block
        Type: String
        AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
        Default: 10.1.10.0/24
    PrivateSubnetCidrBlock:
        Description: Private subnet CIDR block
        Type: String
        AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
        Default: 10.1.20.0/24
    PrivateSubnet2CidrBlock:
        Description: Private subnet 2 CIDR block
        Type: String
        AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
        Default: 10.1.30.0/24
    # Bastion EC2
    BastionImageId:
        Description: Bastion EC2 image ID
        Type: AWS::EC2::Image::Id
        Default: ami-0cc293023f983ed53
    BastionInstanceType:
        Description: Bastion EC2 instance type
        Type: String
        Default: t2.nano
    BastionKeyName:
        Description: SSH key name to access Bastion EC2
        Type: String
        Default: vprokopy
    # RDS
    RdsInstanceClass:
        Description: RDS instance class
        Type: String
        Default: db.t2.micro
    RdsMaxAllocatedStorage:
        Description: RDS maximal allocated storage
        Type: String
        Default: 5
    DbEngine:
        Description: Database engine
        Type: String
        Default: postgres
    DbEngineVersion:
        Description: Database engine version
        Type: String
        Default: 11.2
    DbPort:
        Description: Database port
        Type: Number
        Default: 5432
    DbName:
        Description: Database name
        Type: String
    DbUser:
        Description: Database usper user
        Type: String
    DbPassword:
        Description: Database super user password
        Type: String
        NoEcho: true
Resources:
    # VPC
    Vpc:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCidrBlock
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-Vpc
    # InternetGateway
    InternetGateway:
        Type: AWS::EC2::InternetGateway
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref Vpc
            InternetGatewayId: !Ref InternetGateway
    # Public Subnet
    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            CidrBlock: !Ref PublicSubnetCidrBlock
            AvailabilityZone: !Select [0, !GetAZs ]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-PublicSubnet
    # Public RouteTable
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-PubcliRouteTable
    PublicDefaultRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet
    # Bastion SecurityGroup
    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub ${AWS::StackName}-BastionSecurityGroup
            GroupDescription: Bastion SecurityGroup
            VpcId: !Ref Vpc
    BastionDefaultOutboundRule:
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
            GroupId: !Ref BastionSecurityGroup
            IpProtocol: "-1"
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
    BastionInboundRule:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref BastionSecurityGroup
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
    # Bastion EC2
    BastionEc2:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref BastionImageId
            InstanceType: !Ref BastionInstanceType
            KeyName: !Ref BastionKeyName
            SecurityGroupIds:
                - !GetAtt BastionSecurityGroup.GroupId
            SubnetId: !Ref PublicSubnet
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-BastionEc2
    # Private subnet
    PrivateSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            CidrBlock: !Ref PrivateSubnetCidrBlock
            AvailabilityZone: !Select [0, !GetAZs ]
            # MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-PrivateSubnet
    # # RouteTable
    # RouteTable:
    #     Type: AWS::EC2::RouteTable
    #     Properties:
    #         VpcId: !Ref Vpc
    #         Tags:
    #             - Key: Name
    #               Value: !Sub ${AWS::StackName}-RouteTable
    # DefaultRoute:
    #     Type: AWS::EC2::Route
    #     Properties:
    #         RouteTableId: !Ref RouteTable
    #         DestinationCidrBlock: 0.0.0.0/0
    #         GatewayId: !Ref InternetGateway
    # SubnetRouteTableAssociation:
    #     Type: AWS::EC2::SubnetRouteTableAssociation
    #     Properties:
    #         RouteTableId: !Ref RouteTable
    #         SubnetId: !Ref Subnet
    # Private Subnet 2
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            CidrBlock: !Ref PrivateSubnet2CidrBlock
            AvailabilityZone: !Select [1, !GetAZs ]
            # MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-PrivateSubnet2
    # # RouteTable 2
    # RouteTable2:
    #     Type: AWS::EC2::RouteTable
    #     Properties:
    #         VpcId: !Ref Vpc
    #         Tags:
    #             - Key: Name
    #               Value: !Sub ${AWS::StackName}-RouteTable2
    # DefaultRoute2:
    #     Type: AWS::EC2::Route
    #     Properties:
    #         RouteTableId: !Ref RouteTable2
    #         DestinationCidrBlock: 0.0.0.0/0
    #         GatewayId: !Ref InternetGateway
    # Subnet2RouteTableAssociation:
    #     Type: AWS::EC2::SubnetRouteTableAssociation
    #     Properties:
    #         RouteTableId: !Ref RouteTable2
    #         SubnetId: !Ref Subnet2
    # RDS SecurityGroup
    RdsSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub ${AWS::StackName}-RdsSecurityGroup
            GroupDescription: RDS SecurityGroup
            VpcId: !Ref Vpc
    RdsDefaultOutboundRule:
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
            GroupId: !Ref RdsSecurityGroup
            IpProtocol: "-1"
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
    RdsInboundRule:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref RdsSecurityGroup
            IpProtocol: tcp
            FromPort: !Ref DbPort
            ToPort: !Ref DbPort
            # CidrIp: 0.0.0.0/0
            SourceSecurityGroupId: !Ref BastionSecurityGroup
    # PostgreSQL RDS
    DbSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupName: !Sub ${AWS::StackName}-DbSubnetGroup
            DBSubnetGroupDescription: DB subnet group
            SubnetIds:
                - !Ref PrivateSubnet
                - !Ref PrivateSubnet2
    DbInstance:
        Type: AWS::RDS::DBInstance
        DeletionPolicy: Delete # Snapshot
        Properties:
            DBInstanceClass: !Ref RdsInstanceClass
            AllocatedStorage: !Ref RdsMaxAllocatedStorage
            Engine: !Ref DbEngine
            EngineVersion: !Ref DbEngineVersion
            Port: !Ref DbPort
            DBName: !Ref DbName
            MasterUsername: !Ref DbUser
            MasterUserPassword: !Ref DbPassword
            PubliclyAccessible: true
            DBSubnetGroupName: !Ref DbSubnetGroup
            VPCSecurityGroups:
                - !Ref RdsSecurityGroup
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-Rds
Outputs:
    # VPC
    VpcId:
        Description: VPC ID
        Value: !Ref Vpc
    VpcCidrBlock:
        Description: VPC CIDR block
        Value: !GetAtt Vpc.CidrBlock
    # Public Subnet
    PublicSubnetId:
        Description: Public Subnet ID
        Value: !Ref PublicSubnet
    # Bastion EC2
    BastionEc2InstanceId:
        Description: Bastion EC2 instance ID
        Value: !Ref BastionEc2
    BastionEc2PublicDnsName:
        Description: Bastion EC2 bastion public DNS name
        Value: !GetAtt BastionEc2.PublicDnsName
    BastionEc2PublicIp:
        Description: Bastion EC2 public IP
        Value: !GetAtt BastionEc2.PublicIp
        Export:
            Name: !Sub ${AWS::StackName}:BastionEc2PublicIp
    BastionEc2PrivateDnsName:
        Description: Bastion EC2 private DNS name
        Value: !GetAtt BastionEc2.PrivateDnsName
    BastionEc2PrivateIp:
        Description: Bastion EC2 private IP
        Value: !GetAtt BastionEc2.PrivateIp
    # Private Subnet
    PrivateSubnetId:
        Description: Private Subnet ID
        Value: !Ref PrivateSubnet
    # PrivateSubnet2
    PrivateSubnet2Id:
        Description: Private Subnet 2 ID
        Value: !Ref PrivateSubnet2
    # PostgreSQL RDS
    DbInstanceEndpointAddress:
        Description: Database instance endpoint address
        Value: !GetAtt DbInstance.Endpoint.Address
        Export:
            Name:  !Sub ${AWS::StackName}:RdsEndpointAddress
    DbInstanceEndpointPort:
        Description: Database instance endpoint port
        Value: !GetAtt DbInstance.Endpoint.Port
        Export:
            Name:  !Sub ${AWS::StackName}:RdsEndpointPort
