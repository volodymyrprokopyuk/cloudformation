---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
    Create Lambdas for transferring data from Kinesis Firehose delivery streams S3
    bucket to RDS
Parameters:
    # RDS
    RdsEndpointAddressExportName:
        Description: RDS database endpoint address export name
        Type: String
    RdsEndpointPortExportName:
        Description: RDS database endpoint port export name
        Type: String
    DbName:
        Description: Database name
        Type: String
    DbUser:
        Description: Database master user
        Type: String
    DbPassword:
        Description: Database master user password
        Type: String
    # S3
    S3FirehoseInfringementDeliveryBucketArnExportName:
        Description: Kinesis Firehose infringement delivey S3 bucket ARN export name
        Type: String
    S3LambdaPackageBucketName:
        Description: Lambda package S3 bucket name
        Type: String
    # Lambda
    LambdaPythonRuntime:
        Description: Lambda Python runtime
        Type: String
        Default: python3.7
    LambdaTimeoutSec:
        Description: Lambda timeout
        Type: Number
        Default: 300
    LambdaLogLevel:
        Description: Lambda log level
        Type: String
        Default: INFO
    LambdaPutProductInDbVersion:
        Description: PutProductInDb lambda version
        Type: String
    LambdaPutInfringementInDbVersion:
        Description: PutInfringementInDb lambda version
        Type: String
Resources:
    # Lambda IAM Role
    IamPutDataInDbLambdaPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            ManagedPolicyName: !Sub ${AWS::StackName}-IamPutDataInDbLambdaPolicy
            Description: >-
                Grants access to Lambda to get data from S3 and put data into RDS
            Path: /
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    # S3
                    - Effect: Allow
                      Action:
                          - s3:GetBucketLocation
                          - s3:ListBucket
                          - s3:GetObject
                          - s3:ListBucketMultipartUploads
                      Resource:
                          - Fn::ImportValue: !Ref S3FirehoseInfringementDeliveryBucketArnExportName
                          - !Sub
                              - ${S3FirehoseInfringementDeliveryBucketArn}/*
                              - S3FirehoseInfringementDeliveryBucketArn:
                                  Fn::ImportValue: !Ref S3FirehoseInfringementDeliveryBucketArnExportName
                    # CloudWatch
                    - Effect: Allow
                      Action:
                          - logs:*
                      Resource:
                          - arn:aws:logs:*:*:*
    IamPutDataInDbLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${AWS::StackName}-IamPutDataInDbLambdaRole
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - lambda.amazonaws.com
            ManagedPolicyArns:
                - !Ref IamPutDataInDbLambdaPolicy
    # Product lambda
    PutProductInDbLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-PutProductInDbLambda
            Description: Put products into database
            Runtime: !Ref LambdaPythonRuntime
            Timeout: !Ref LambdaTimeoutSec
            Environment:
                Variables:
                    STACK_NAME: !Ref AWS::StackName
                    LAMBDA_VERSION: !Ref LambdaPutProductInDbVersion
                    LOG_LEVEL: !Ref LambdaLogLevel
                    DB_HOST:
                        Fn::ImportValue: !Ref RdsEndpointAddressExportName
                    DB_PORT:
                        Fn::ImportValue: !Ref RdsEndpointPortExportName
                    DB_NAME: !Ref DbName
                    DB_USER: !Ref DbUser
                    DB_PASSWORD: !Ref DbPassword
            Code:
                S3Bucket: !Ref S3LambdaPackageBucketName
                S3Key: !Sub PutProductInDbLambda-${LambdaPutProductInDbVersion}.zip
            Handler: lambda_function.lambda_handler
            Role: !GetAtt IamPutDataInDbLambdaRole.Arn
    S3InvokePutProductInDbLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt PutProductInDbLambda.Arn
            Principal: s3.amazonaws.com
            SourceArn:
                Fn::ImportValue: !Ref S3FirehoseInfringementDeliveryBucketArnExportName
    # Infringement lambda
    PutInfringementInDbLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-PutInfringementInDbLambda
            Description: Put infringements into database
            Runtime: !Ref LambdaPythonRuntime
            Timeout: !Ref LambdaTimeoutSec
            Environment:
                Variables:
                    STACK_NAME: !Ref AWS::StackName
                    LAMBDA_VERSION: !Ref LambdaPutInfringementInDbVersion
                    LOG_LEVEL: !Ref LambdaLogLevel
                    DB_HOST:
                        Fn::ImportValue: !Ref RdsEndpointAddressExportName
                    DB_PORT:
                        Fn::ImportValue: !Ref RdsEndpointPortExportName
                    DB_NAME: !Ref DbName
                    DB_USER: !Ref DbUser
                    DB_PASSWORD: !Ref DbPassword
            Code:
                S3Bucket: !Ref S3LambdaPackageBucketName
                S3Key: !Sub PutInfringementInDbLambda-${LambdaPutInfringementInDbVersion}.zip
            Handler: lambda_function.lambda_handler
            Role: !GetAtt IamPutDataInDbLambdaRole.Arn
    S3InvokePutInfringementInDbLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt PutInfringementInDbLambda.Arn
            Principal: s3.amazonaws.com
            SourceArn:
                Fn::ImportValue: !Ref S3FirehoseInfringementDeliveryBucketArnExportName
Outputs:
    # Product Lambda
    PutProductInDbLambdaName:
        Description: PutProductInDb lambda name
        Value: !Ref PutProductInDbLambda
    PutProductInDbLambdaVersion:
        Description: PutProductInDb lambda version
        Value: !Ref LambdaPutInfringementInDbVersion
    PutProductInDbLambdaArn:
        Description: PutProductInDb lambda ARN
        Value: !GetAtt PutProductInDbLambda.Arn
        Export:
            Name: !Sub ${AWS::StackName}:PutProductInDbLambdaArn
    # Infringement Lambda
    PutInfringementInDbLambdaName:
        Description: PutInfringementInDb lambda name
        Value: !Ref PutInfringementInDbLambda
    PutInfringementInDbLambdaVersion:
        Description: PutInfringementInDb lambda version
        Value: !Ref LambdaPutInfringementInDbVersion
    PutInfringementInDbLambdaArn:
        Description: PutInfringementInDb lambda ARN
        Value: !GetAtt PutInfringementInDbLambda.Arn
        Export:
            Name: !Sub ${AWS::StackName}:PutInfringementInDbLambdaArn
